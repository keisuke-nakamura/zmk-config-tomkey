#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp L         &kp U             &kp COMMA       &kp PERIOD                                                &kp F       &kp W  &kp R  &kp Y  &kp P
&kp E      &kp I         &kp A             &kp O           &kp TAB          &lt 6 LC(SPACE)         &lt 6 F5         &kp K       &kp T  &kp N  &kp S  &lt 2 H
&kp Z      &kp X         &kp C             &kp V           &lt 4 SEMICOLON  &lt 3 SINGLE_QUOTE      &kp RIGHT_SHIFT  &kp G       &kp D  &kp M  &kp J  &kp B
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &kp SPACE        &kp DEL                 &kp BACKSPACE    &kp RETURN                       &lt 5 ESCAPE
            >;
        };

        MOUSE {
            bindings = <
&trans     &mkp MB4      &trans            &mkp MB5        &trans                      &trans  &mkp MB4  &none   &mkp MB5  &trans
&trans     &mkp MB1      &trans            &mkp MB2        &trans  &trans      &trans  &trans  &mkp MB1  &none   &mkp MB2  &trans
&trans     &trans        &trans            &trans          &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &trans  &trans      &trans  &mo 3                               &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&none   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        ARROW {
            bindings = <
&none   &none     &kp UP_ARROW    &none      &none                       &trans  &none           &kp UP_ARROW    &none            &none
&none   &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &none   &trans      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
&none   &none     &trans          &none      &none   &trans      &trans  &trans  &trans          &none           &trans           &none
&trans  &trans    &trans          &trans     &trans  &trans      &trans  &trans                                                   &trans
            >;
        };

        NUM {
            bindings = <
&trans  &kp NUMBER_7  &kp NUMBER_8  &kp N9        &none                       &kp SLASH             &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS
&trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none   &trans      &trans  &kp LS(SINGLE_QUOTE)  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp LS(SEMICOLON)
&kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none   &trans      &trans  &kp NUMBER_0          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LS(MINUS)
&trans  &trans        &trans        &trans        &trans  &trans      &trans  &kp RIGHT_SHIFT                                                 &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans   &trans   &trans   &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        layer_6 {
            bindings = <
&kp EQUAL  &kp INT3             &kp LEFT_BRACKET   &trans           &trans                      &trans            &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)
&trans     &kp INTERNATIONAL_1  &kp RIGHT_BRACKET  &kp NON_US_HASH  &trans  &trans      &trans  &kp LS(NUMBER_5)  &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)
&trans     &trans               &trans             &trans           &trans  &trans      &trans  &trans            &trans            &trans            &trans            &trans
&trans     &trans               &trans             &trans           &trans  &trans      &trans  &trans                                                                  &trans
            >;
        };
    };
};
