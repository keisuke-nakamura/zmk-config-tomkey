#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp L         &kp U             &kp COMMA       &kp PERIOD                                                   &kp F            &kp W  &kp R  &kp Y  &kp P
&kp E      &kp I         &kp A             &kp O           &kp MINUS      &mo 6                        &kp BACKSLASH    &kp K            &kp T  &kp N  &kp S  &kp H
&lt 2 Z    &kp X         &kp C             &kp V           &kp SEMICOLON  &kp LEFT_BRACE               &kp RIGHT_BRACE  &kp G            &kp D  &kp M  &kp J  &kp B
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &lt 4 SPACE    &kt LANG_ZENKAKUHANKAKU      &kp ENTER        &lt 3 BACKSPACE                       &lt 5 ESCAPE
            >;
        };

        MOUSE {
            bindings = <
&trans     &trans        &trans            &trans          &trans                      &trans  &trans    &none   &trans    &trans
&trans     &mkp MB1      &trans            &mkp MB2        &trans  &trans      &trans  &trans  &mkp MB1  &none   &mkp MB2  &trans
&trans     &trans        &trans            &trans          &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &trans  &trans      &trans  &mo 3                               &trans
            >;
        };

        SCROLL {
            bindings = <
&none   &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&none   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        ARROW {
            bindings = <
&none   &none             &kp LG(UP_ARROW)    &none              &none                       &trans  &none           &kp UP_ARROW    &none            &none
&none   &kp LA(LG(LEFT))  &kp LG(DOWN_ARROW)  &kp LG(LA(RIGHT))  &none   &trans      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
&none   &none             &trans              &none              &none   &trans      &trans  &trans  &trans          &none           &trans           &none
&trans  &trans            &trans              &trans             &trans  &trans      &trans  &trans                                                   &trans
            >;
        };

        NUM {
            bindings = <
&none   &kp NUMBER_7  &kp NUMBER_8  &kp N9        &none                       &kp SLASH        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS
&none   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none   &trans      &trans  &kp ASTRK        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS
&kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none   &trans      &trans  &kp NUMBER_0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
&trans  &trans        &trans        &trans        &trans  &trans      &trans  &kp RIGHT_SHIFT                                            &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans   &trans   &trans   &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        layer_6 {
            bindings = <
&kp LG(Q)      &kp LC(W)  &trans     &trans     &trans                      &bt BT_PRV  &bt BT_NXT  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp LG(LS(Z))  &trans     &kp LC(C)  &trans     &trans  &trans      &trans  &trans      &trans      &trans        &trans        &trans
&kp LG(Z)      &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans  &trans      &trans  &trans      &trans      &trans        &trans        &trans
&trans         &trans     &trans     &trans     &trans  &trans      &trans  &trans                                              &trans
            >;
        };
    };
};
